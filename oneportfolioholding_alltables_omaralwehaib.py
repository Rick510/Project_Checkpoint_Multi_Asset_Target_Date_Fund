# -*- coding: utf-8 -*-
"""OnePortfolioHolding/AllTables_OmarAlwehaib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OfBPLgf_n49ljMxYAo1CgKpqXf0iRheQ

Finished code for Portfoliogeninfo table
"""

import pandas as pd
import yfinance as yf
from datetime import datetime
from IPython.display import display, Markdown

# --- 1. Define portfolio metadata ---
portfolio_meta = pd.DataFrame([
    {
        "PORTFOLIOCODE": "PORT001",
        "PRODUCTCODE": "PRD001",
        "NAME": "DLCV Diversified Large Cap Value",
        "STYLE": "Growth",
        "CATEGORY": "Individual Account",
        "OPEN_DATE": "2015-01-01",
        "TERMINATION_DATE": None,
        "ASSET_CLASS": "Equity",
        "CURRENCY": "USD",
        "VEHICLE_TYPE": "Equity",
        "VEHICLE_TYPE_CODE": "EQUITY",
        "CLIENT_ORGANIZATION": "DLCV Diversified Large Cap Value"
    },
    {
        "PORTFOLIOCODE": "PORT002",
        "PRODUCTCODE": "PRD002",
        "NAME": "TSVG Tech Select Value Growth",
        "STYLE": "Value",
        "CATEGORY": "Individual Account",
        "OPEN_DATE": "2016-06-01",
        "TERMINATION_DATE": None,
        "ASSET_CLASS": "Equity",
        "CURRENCY": "USD",
        "VEHICLE_TYPE": "Equity",
        "VEHICLE_TYPE_CODE": "EQUITY",
        "CLIENT_ORGANIZATION": "TSVG Tech Select Value Growth"
    }
])

# --- 2. Define portfolio holdings separately ---
portfolio_holdings = pd.DataFrame([
    {"PORTFOLIOCODE": "PORT001", "TICKER": "AAPL"},
    {"PORTFOLIOCODE": "PORT001", "TICKER": "MSFT"},
    {"PORTFOLIOCODE": "PORT002", "TICKER": "GOOGL"},
    {"PORTFOLIOCODE": "PORT002", "TICKER": "AMZN"}
])

# --- 3. Get all tickers and download prices ---
AS_OF = datetime.today().strftime("%Y-%m-%d")
all_tickers = sorted(portfolio_holdings["TICKER"].unique())
start_date = portfolio_meta["OPEN_DATE"].min()
price_df = yf.download(all_tickers, start=start_date, end=AS_OF, progress=False)["Close"]
price_df = price_df.resample("M").last().dropna(how="all")
price_df.index.name = "as_of_date"
price_df = price_df.reset_index()

# --- 4. Initialize final tables ---
df_general_all, df_attributes_all, df_holdings_all, df_performance_all = [], [], [], []

# --- 5. Process each portfolio logically ---
for _, meta in portfolio_meta.iterrows():
    portfolio_code = meta["PORTFOLIOCODE"]
    tickers = portfolio_holdings.query("PORTFOLIOCODE == @portfolio_code")["TICKER"].tolist()
    subset = price_df[["as_of_date"] + tickers].copy()
    subset["price"] = subset[tickers].mean(axis=1)
    subset["performance_factor"] = (subset["price"] / subset["price"].shift(1) - 1).clip(-1, 1).fillna(0)

    # General Info
    df_general_all.append({
        "BASECURRENCYCODE":         meta["CURRENCY"],
        "BASECURRENCYNAME":         meta["CURRENCY"],
        "INVESTMENTSTYLE":          meta["STYLE"],
        "ISBEGINOFDAYPERFORMANCE":  True,
        "NAME":                     meta["NAME"],
        "OPENDATE":                 pd.to_datetime(meta["OPEN_DATE"]).date(),
        "PERFORMANCEINCEPTIONDATE": pd.to_datetime(meta["OPEN_DATE"]).date(),
        "PORTFOLIOCATEGORY":        meta["CATEGORY"],
        "PORTFOLIOCODE":            portfolio_code,
        "PRODUCTCODE":              meta["PRODUCTCODE"],
        "TERMINATIONDATE":          meta["TERMINATION_DATE"]
    })

    # Attributes
    attrs = [
        ("Strategy", meta["CLIENT_ORGANIZATION"], meta["NAME"]),
        ("ClientOrganization", meta["CLIENT_ORGANIZATION"], meta["CLIENT_ORGANIZATION"]),
        ("AssetClass", meta["ASSET_CLASS"], meta["ASSET_CLASS"]),
        ("Vehicle", meta["VEHICLE_TYPE_CODE"], meta["VEHICLE_TYPE"]),
        ("VehicleCategory", "VEHICLECATEGORY", meta["CATEGORY"])
    ]
    for atype, code, val in attrs:
        df_attributes_all.append({
            "ATTRIBUTETYPE": atype,
            "ATTRIBUTETYPECODE": code,
            "ATTRIBUTETYPEVALUE": val,
            "PORTFOLIOCODE": portfolio_code
        })

    # Holdings table
    for ticker in tickers:
        df_holdings_all.append(pd.DataFrame({
            "PORTFOLIOCODE":              portfolio_code,
            "HISTORYDATE":                subset["as_of_date"],
            "ISSUEDISPLAYNAME":           ticker,
            "CUSTOMCLASSIFICATION1NAME":  meta["ASSET_CLASS"],
            "CUSTOMCLASSIFICATION2NAME":  "",
            "CUSTOMCLASSIFICATION3NAME":  "",
            "CUSTOMCLASSIFICATION4NAME":  "",
            "MARKETVALUE":                subset[ticker],
            "PORTFOLIOWEIGHT":            round(1.0 / len(tickers), 2),
            "CURRENCYCODE":               meta["CURRENCY"]
        }))

    # Performance table
    df_performance_all.append(pd.DataFrame({
        "CURRENCY":                   meta["CURRENCY"],
        "CURRENCYCODE":               meta["CURRENCY"],
        "HISTORYDATE":                subset["as_of_date"],
        "PERFORMANCECATEGORY":        "Asset Class",
        "PERFORMANCECATEGORYNAME":    "Total Portfolio",
        "PERFORMANCEFACTOR":          subset["performance_factor"],
        "PERFORMANCEFREQUENCY":       "1M",
        "PERFORMANCEINCEPTIONDATE":   pd.to_datetime(meta["OPEN_DATE"]).date(),
        "PERFORMANCETYPE":            "Portfolio Gross",
        "PORTFOLIOCODE":              portfolio_code,
        "PORTFOLIOINCEPTIONDATE":     pd.to_datetime(meta["OPEN_DATE"]).date()
    }))

# --- 6. Final output tables ---
df_general = pd.DataFrame(df_general_all)
df_attributes = pd.DataFrame(df_attributes_all)
df_holdings = pd.concat(df_holdings_all, ignore_index=True)
df_performance = pd.concat(df_performance_all, ignore_index=True)

# --- 7. Display results ---
display(Markdown("## Portfolio General Information"))
display(df_general)

display(Markdown("## Portfolio Attributes"))
display(df_attributes)

display(Markdown("## Holding Details"))
display(df_holdings)

display(Markdown("## Portfolio Performance"))
display(df_performance)

import pandas as pd
import yfinance as yf
from datetime import datetime
from IPython.display import display, Markdown

# 2. Define single‐holding portfolio
portfolio = {
    "code":                "PORT001",
    "product_code":        "PRD001",
    "name":                "DLCV Diversified Large Cap Value",
    "style":               "Growth",
    "category":            "Individual Account",
    "open_date":           "2015-01-01",
    "termination_date":    None,
    "holding":             "AAPL",
    "asset_class":         "Equity",
    "sub_asset_class":     "",
    "sector":              "",
    "region":              "",
    "currency":            "USD",
    "vehicle_type":        "Equity",
    "vehicle_type_code":   "EQUITY",
    "client_organization": "DLCV Diversified Large Cap Value"
}

AS_OF = datetime.today().strftime("%Y-%m-%d")

# 3. Adjusted Close pricing
df = yf.download(
    portfolio["holding"],
    start=portfolio["open_date"],
    end=AS_OF,
    progress=False
)
series = df["Adj Close"] if "Adj Close" in df.columns else df["Close"]

# 4. Build month‐end price DataFrame (robust to Series or DataFrame)
prices_m = series.resample("M").last()
if isinstance(prices_m, pd.Series):
    monthly = prices_m.to_frame(name="price")
else:
    # prices_m is a DataFrame—take its first column as price
    col0 = prices_m.columns[0]
    monthly = prices_m.rename(columns={col0: "price"})
monthly.index.name = "as_of_date"
monthly = monthly.reset_index()

# 5. Explicit performance-factor calculation
monthly["performance_factor"] = (
    (monthly["price"] / monthly["price"].shift(1) - 1)
    .clip(-1, 1)
    .fillna(0)
)

# 6a. Portfolio General Information
df_general = pd.DataFrame([{
    "BASECURRENCYCODE":         portfolio["currency"],
    "BASECURRENCYNAME":         portfolio["currency"],
    "INVESTMENTSTYLE":          portfolio["style"],
    "ISBEGINOFDAYPERFORMANCE":  True,
    "NAME":                     portfolio["name"],
    "OPENDATE":                 pd.to_datetime(portfolio["open_date"]).date(),
    "PERFORMANCEINCEPTIONDATE": pd.to_datetime(portfolio["open_date"]).date(),
    "PORTFOLIOCATEGORY":        portfolio["category"],
    "PORTFOLIOCODE":            portfolio["code"],
    "PRODUCTCODE":              portfolio["product_code"],
    "TERMINATIONDATE":          portfolio["termination_date"]
}])

# 6b. Portfolio Attributes
attrs = [
    ("Strategy",            "DLCV",                    "Diversified Large Cap Value"),
    ("ClientOrganization",  portfolio["client_organization"], portfolio["client_organization"]),
    ("AssetClass",          portfolio["asset_class"],  portfolio["asset_class"]),
    ("Vehicle",             portfolio["vehicle_type_code"], portfolio["vehicle_type"]),
    ("VehicleCategory",     "VEHICLECATEGORY",         portfolio["category"])
]
df_attributes = pd.DataFrame([{
    "ATTRIBUTETYPE":      atype,
    "ATTRIBUTETYPECODE":  code,
    "ATTRIBUTETYPEVALUE": val,
    "PORTFOLIOCODE":      portfolio["code"]
} for atype, code, val in attrs])

# 6c. Holding Details (one row per month; weight = 1.0)
df_holdings = monthly.assign(
    PORTFOLIOCODE             = portfolio["code"],
    HISTORYDATE               = monthly["as_of_date"],
    ISSUEDISPLAYNAME          = portfolio["holding"],
    CUSTOMCLASSIFICATION1NAME = portfolio["asset_class"],
    CUSTOMCLASSIFICATION2NAME = portfolio["sub_asset_class"],
    CUSTOMCLASSIFICATION3NAME = portfolio["sector"],
    CUSTOMCLASSIFICATION4NAME = portfolio["region"],
    MARKETVALUE               = monthly["price"],
    PORTFOLIOWEIGHT           = 1.0,
    CURRENCYCODE              = portfolio["currency"]
)[[
    "PORTFOLIOCODE","HISTORYDATE","ISSUEDISPLAYNAME",
    "CUSTOMCLASSIFICATION1NAME","CUSTOMCLASSIFICATION2NAME",
    "CUSTOMCLASSIFICATION3NAME","CUSTOMCLASSIFICATION4NAME",
    "MARKETVALUE","PORTFOLIOWEIGHT","CURRENCYCODE"
]]

# 6d. Portfolio Performance
ptype = ("Portfolio Net"
         if portfolio["vehicle_type_code"] in ("POOLED","MUTUALFUND")
         else "Portfolio Gross")
df_performance = monthly.assign(
    CURRENCY                  = portfolio["currency"],
    CURRENCYCODE              = portfolio["currency"],
    HISTORYDATE               = monthly["as_of_date"],
    PERFORMANCECATEGORY       = "Asset Class",
    PERFORMANCECATEGORYNAME   = "Total Portfolio",
    PERFORMANCEFACTOR         = monthly["performance_factor"],
    PERFORMANCEFREQUENCY      = "1M",
    PERFORMANCEINCEPTIONDATE  = pd.to_datetime(portfolio["open_date"]).date(),
    PERFORMANCETYPE           = ptype,
    PORTFOLIOCODE             = portfolio["code"],
    PORTFOLIOINCEPTIONDATE    = pd.to_datetime(portfolio["open_date"]).date()
)[[
    "CURRENCY","CURRENCYCODE","HISTORYDATE",
    "PERFORMANCECATEGORY","PERFORMANCECATEGORYNAME",
    "PERFORMANCEFACTOR","PERFORMANCEFREQUENCY",
    "PERFORMANCEINCEPTIONDATE","PERFORMANCETYPE",
    "PORTFOLIOCODE","PORTFOLIOINCEPTIONDATE"
]]

# 7. Display all tables
display(Markdown("## Portfolio General Information"))
display(df_general)

display(Markdown("## Portfolio Attributes"))
display(df_attributes)

display(Markdown("## Holding Details"))
display(df_holdings)

display(Markdown("## Portfolio Performance"))
display(df_performance)

import pandas as pd
import yfinance as yf
from datetime import datetime
from IPython.display import display, Markdown

# --- 1. Define multiple portfolios with two holdings each ---
portfolios = [
    {
        "code": "PORT001",
        "product_code": "PRD001",
        "name": "DLCV Diversified Large Cap Value",
        "style": "Growth",
        "category": "Individual Account",
        "open_date": "2015-01-01",
        "termination_date": None,
        "holdings": ["AAPL", "MSFT"],
        "asset_class": "Equity",
        "sub_asset_class": "",
        "sector": "",
        "region": "",
        "currency": "USD",
        "vehicle_type": "Equity",
        "vehicle_type_code": "EQUITY",
        "client_organization": "DLCV Diversified Large Cap Value"
    },
    {
        "code": "PORT002",
        "product_code": "PRD002",
        "name": "TSVG Tech Select Value Growth",
        "style": "Value",
        "category": "Individual Account",
        "open_date": "2016-06-01",
        "termination_date": None,
        "holdings": ["GOOGL", "AMZN"],
        "asset_class": "Equity",
        "sub_asset_class": "",
        "sector": "",
        "region": "",
        "currency": "USD",
        "vehicle_type": "Equity",
        "vehicle_type_code": "EQUITY",
        "client_organization": "TSVG Tech Select Value Growth"
    }
]

AS_OF = datetime.today().strftime("%Y-%m-%d")

# --- 2. Pull price data once ---
all_tickers = sorted({ticker for p in portfolios for ticker in p["holdings"]})
price_df = yf.download(all_tickers, start="2015-01-01", end=AS_OF, progress=False)["Close"]
price_df = price_df.resample("M").last().dropna(how="all")
price_df.index.name = "as_of_date"
price_df = price_df.reset_index()

# --- 3. Initialize output tables ---
df_general_all = []
df_attributes_all = []
df_holdings_all = []
df_performance_all = []

# --- 4. Build rows per portfolio ---
for portfolio in portfolios:
    tickers = portfolio["holdings"]
    subset = price_df[["as_of_date"] + tickers].copy()
    subset["price"] = subset[tickers].mean(axis=1)
    subset["performance_factor"] = (subset["price"] / subset["price"].shift(1) - 1).clip(-1, 1).fillna(0)

    # General Info
    df_general_all.append({
        "BASECURRENCYCODE":         portfolio["currency"],
        "BASECURRENCYNAME":         portfolio["currency"],
        "INVESTMENTSTYLE":          portfolio["style"],
        "ISBEGINOFDAYPERFORMANCE":  True,
        "NAME":                     portfolio["name"],
        "OPENDATE":                 pd.to_datetime(portfolio["open_date"]).date(),
        "PERFORMANCEINCEPTIONDATE": pd.to_datetime(portfolio["open_date"]).date(),
        "PORTFOLIOCATEGORY":        portfolio["category"],
        "PORTFOLIOCODE":            portfolio["code"],
        "PRODUCTCODE":              portfolio["product_code"],
        "TERMINATIONDATE":          portfolio["termination_date"]
    })

    # Attributes
    attrs = [
        ("Strategy",            portfolio["client_organization"], portfolio["name"]),
        ("ClientOrganization",  portfolio["client_organization"], portfolio["client_organization"]),
        ("AssetClass",          portfolio["asset_class"],  portfolio["asset_class"]),
        ("Vehicle",             portfolio["vehicle_type_code"], portfolio["vehicle_type"]),
        ("VehicleCategory",     "VEHICLECATEGORY",         portfolio["category"])
    ]
    for atype, code, val in attrs:
        df_attributes_all.append({
            "ATTRIBUTETYPE":      atype,
            "ATTRIBUTETYPECODE":  code,
            "ATTRIBUTETYPEVALUE": val,
            "PORTFOLIOCODE":      portfolio["code"]
        })

    # Holdings
    for ticker in tickers:
        df_holdings_all.append(pd.DataFrame({
            "PORTFOLIOCODE":              portfolio["code"],
            "HISTORYDATE":                subset["as_of_date"],
            "ISSUEDISPLAYNAME":           ticker,
            "CUSTOMCLASSIFICATION1NAME":  portfolio["asset_class"],
            "CUSTOMCLASSIFICATION2NAME":  portfolio["sub_asset_class"],
            "CUSTOMCLASSIFICATION3NAME":  portfolio["sector"],
            "CUSTOMCLASSIFICATION4NAME":  portfolio["region"],
            "MARKETVALUE":                subset[ticker],
            "PORTFOLIOWEIGHT":            round(1.0 / len(tickers), 2),
            "CURRENCYCODE":               portfolio["currency"]
        }))

    # Performance
    ptype = "Portfolio Gross"
    df_performance_all.append(pd.DataFrame({
        "CURRENCY":                   portfolio["currency"],
        "CURRENCYCODE":               portfolio["currency"],
        "HISTORYDATE":                subset["as_of_date"],
        "PERFORMANCECATEGORY":        "Asset Class",
        "PERFORMANCECATEGORYNAME":    "Total Portfolio",
        "PERFORMANCEFACTOR":          subset["performance_factor"],
        "PERFORMANCEFREQUENCY":       "1M",
        "PERFORMANCEINCEPTIONDATE":   pd.to_datetime(portfolio["open_date"]).date(),
        "PERFORMANCETYPE":            ptype,
        "PORTFOLIOCODE":              portfolio["code"],
        "PORTFOLIOINCEPTIONDATE":     pd.to_datetime(portfolio["open_date"]).date()
    }))

# --- 5. Combine results ---
df_general = pd.DataFrame(df_general_all)
df_attributes = pd.DataFrame(df_attributes_all)
df_holdings = pd.concat(df_holdings_all, ignore_index=True)
df_performance = pd.concat(df_performance_all, ignore_index=True)

# --- 6. Display ---
display(Markdown("## Portfolio General Information"))
display(df_general)

display(Markdown("## Portfolio Attributes"))
display(df_attributes)

display(Markdown("## Holding Details"))
display(df_holdings)

display(Markdown("## Portfolio Performance"))
display(df_performance)

import pandas as pd
import yfinance as yf
from datetime import datetime
from IPython.display import display, Markdown

# --- 1. Define portfolio metadata ---
portfolio_meta = pd.DataFrame([
    {
        "PORTFOLIOCODE": "PORT001",
        "PRODUCTCODE": "PRD001",
        "NAME": "DLCV Diversified Large Cap Value",
        "STYLE": "Growth",
        "CATEGORY": "Individual Account",
        "OPEN_DATE": "2015-01-01",
        "TERMINATION_DATE": None,
        "ASSET_CLASS": "Equity",
        "CURRENCY": "USD",
        "VEHICLE_TYPE": "Equity",
        "VEHICLE_TYPE_CODE": "EQUITY",
        "CLIENT_ORGANIZATION": "DLCV Diversified Large Cap Value"
    },
    {
        "PORTFOLIOCODE": "PORT002",
        "PRODUCTCODE": "PRD002",
        "NAME": "TSVG Tech Select Value Growth",
        "STYLE": "Value",
        "CATEGORY": "Individual Account",
        "OPEN_DATE": "2016-06-01",
        "TERMINATION_DATE": None,
        "ASSET_CLASS": "Equity",
        "CURRENCY": "USD",
        "VEHICLE_TYPE": "Equity",
        "VEHICLE_TYPE_CODE": "EQUITY",
        "CLIENT_ORGANIZATION": "TSVG Tech Select Value Growth"
    }
])

# --- 2. Define portfolio holdings ---
portfolio_holdings = pd.DataFrame([
    {"PORTFOLIOCODE": "PORT001", "TICKER": "AAPL"},
    {"PORTFOLIOCODE": "PORT001", "TICKER": "MSFT"},
    {"PORTFOLIOCODE": "PORT002", "TICKER": "GOOGL"},
    {"PORTFOLIOCODE": "PORT002", "TICKER": "AMZN"}
])

# --- 3. Download monthly prices ---
AS_OF = datetime.today().strftime("%Y-%m-%d")
all_tickers = sorted(portfolio_holdings["TICKER"].unique())
start_date = portfolio_meta["OPEN_DATE"].min()
price_df = yf.download(all_tickers, start=start_date, end=AS_OF, progress=False)["Close"]
price_df = price_df.resample("M").last().dropna(how="all")
price_df.index.name = "as_of_date"
price_df = price_df.reset_index()

# --- 4. Initialize output tables ---
df_general_all, df_attributes_all, df_holdings_all, df_performance_all = [], [], [], []

# --- 5. Process each portfolio ---
for _, meta in portfolio_meta.iterrows():
    portfolio_code = meta["PORTFOLIOCODE"]
    tickers = portfolio_holdings.query("PORTFOLIOCODE == @portfolio_code")["TICKER"].tolist()
    subset = price_df[["as_of_date"] + tickers].copy()

    # Calculate average price across holdings
    subset["price"] = subset[tickers].mean(axis=1)

    # --- Performance Factor ---
    # Formula: Monthly Return = (P_t / P_{t-1}) - 1
    subset["performance_factor"] = subset["price"].pct_change().fillna(0).clip(-1, 1)

    # --- Portfolio General Info ---
    df_general_all.append({
        "BASECURRENCYCODE":         meta["CURRENCY"],
        "BASECURRENCYNAME":         meta["CURRENCY"],
        "INVESTMENTSTYLE":          meta["STYLE"],
        "ISBEGINOFDAYPERFORMANCE":  True,
        "NAME":                     meta["NAME"],
        "OPENDATE":                 pd.to_datetime(meta["OPEN_DATE"]).date(),
        "PERFORMANCEINCEPTIONDATE": pd.to_datetime(meta["OPEN_DATE"]).date(),
        "PORTFOLIOCATEGORY":        meta["CATEGORY"],
        "PORTFOLIOCODE":            portfolio_code,
        "PRODUCTCODE":              meta["PRODUCTCODE"],
        "TERMINATIONDATE":          meta["TERMINATION_DATE"]
    })

    # --- Portfolio Attributes ---
    attrs = [
        ("Strategy", meta["CLIENT_ORGANIZATION"], meta["NAME"]),
        ("ClientOrganization", meta["CLIENT_ORGANIZATION"], meta["CLIENT_ORGANIZATION"]),
        ("AssetClass", meta["ASSET_CLASS"], meta["ASSET_CLASS"]),
        ("Vehicle", meta["VEHICLE_TYPE_CODE"], meta["VEHICLE_TYPE"]),
        ("VehicleCategory", "VEHICLECATEGORY", meta["CATEGORY"])
    ]
    for atype, code, val in attrs:
        df_attributes_all.append({
            "ATTRIBUTETYPE": atype,
            "ATTRIBUTETYPECODE": code,
            "ATTRIBUTETYPEVALUE": val,
            "PORTFOLIOCODE": portfolio_code
        })

    # --- Holdings Table (monthly records per holding) ---
    for ticker in tickers:
        df_holdings_all.append(pd.DataFrame({
            "PORTFOLIOCODE":              portfolio_code,
            "HISTORYDATE":                subset["as_of_date"],
            "ISSUEDISPLAYNAME":           ticker,
            "CUSTOMCLASSIFICATION1NAME":  meta["ASSET_CLASS"],
            "CUSTOMCLASSIFICATION2NAME":  "",
            "CUSTOMCLASSIFICATION3NAME":  "",
            "CUSTOMCLASSIFICATION4NAME":  "",
            "MARKETVALUE":                subset[ticker],
            "PORTFOLIOWEIGHT":            round(1.0 / len(tickers), 2),
            "CURRENCYCODE":               meta["CURRENCY"]
        }))

    # --- Performance Table ---
    df_performance_all.append(pd.DataFrame({
        "CURRENCY":                   meta["CURRENCY"],
        "CURRENCYCODE":               meta["CURRENCY"],
        "HISTORYDATE":                subset["as_of_date"],
        "PERFORMANCECATEGORY":        "Asset Class",
        "PERFORMANCECATEGORYNAME":    "Total Portfolio",
        "PERFORMANCEFACTOR":          subset["performance_factor"],
        "PERFORMANCEFREQUENCY":       "1M",
        "PERFORMANCEINCEPTIONDATE":   pd.to_datetime(meta["OPEN_DATE"]).date(),
        "PERFORMANCETYPE":            "Portfolio Gross",
        "PORTFOLIOCODE":              portfolio_code,
        "PORTFOLIOINCEPTIONDATE":     pd.to_datetime(meta["OPEN_DATE"]).date()
    }))

# --- 6. Assemble final tables ---
df_general = pd.DataFrame(df_general_all)
df_attributes = pd.DataFrame(df_attributes_all)
df_holdings = pd.concat(df_holdings_all, ignore_index=True)
df_performance = pd.concat(df_performance_all, ignore_index=True)

# --- 7. Display output ---
display(Markdown("## Portfolio General Information"))
display(df_general)

display(Markdown("## Portfolio Attributes"))
display(df_attributes)

display(Markdown("## Holding Details"))
display(df_holdings)

display(Markdown("## Portfolio Performance"))
display(df_performance)