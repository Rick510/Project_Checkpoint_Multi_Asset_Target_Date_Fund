# -*- coding: utf-8 -*-
"""ProductMaster_OmarAlwehaib

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zvO3y6YyRt_0Ma3YkwBqDXSp-RpRcY2j
"""

import pandas as pd
import yfinance as yf
from IPython.display import display, Markdown

# 1. Define equity fund tickers (ETFs & Mutual Funds)
fund_tickers = ["SPY", "VOO", "IVV", "VTI", "QQQ", "VTSAX", "VFIAX"]

# 2. Inference helpers based on yf.Ticker.info
def is_marketed(info):
    return bool(info.get("exchange")) and info.get("regularMarketPrice") is not None

def get_vehicle_type(info):
    qt = info.get("quoteType", "").upper()
    name = (info.get("longName") or "").lower()
    if qt == "ETF":
        return "ETF"
    if "mutual fund" in name:
        return "Mutual Fund"
    return None

def get_vehicle_category(vt):
    if vt == "ETF":
        return "Pooled"
    if vt == "Mutual Fund":
        return "Pooled"
    return None

def get_asset_class(info):
    name = (info.get("longName") or "").lower()
    if any(k in name for k in ("bond", "fixed income", "credit")):
        return "Fixed Income"
    return "Equity"

# 3. Fetch info and build records
records = []
for sym in fund_tickers:
    info = yf.Ticker(sym).info or {}
    vt = get_vehicle_type(info)
    records.append({
        "PRODUCTCODE":           sym,
        "PRODUCTNAME":           info.get("longName") or info.get("shortName"),
        "STRATEGY":              info.get("fundFamily"),
        "VEHICLECATEGORY":       get_vehicle_category(vt),
        "VEHICLETYPE":           vt,
        "ASSETCLASS":            get_asset_class(info),
        "SHARECLASS":            None,
        "PERFORMANCEACCOUNT":    None,
        "REPRESENTATIVEACCOUNT": None,
        "ISMARKETED":            is_marketed(info),
        "PARENTPRODUCTCODE":     None
    })

# 4. Assemble DataFrame in specified order
cols = [
    "PRODUCTCODE", "PRODUCTNAME", "STRATEGY",
    "VEHICLECATEGORY", "VEHICLETYPE", "ASSETCLASS",
    "SHARECLASS", "PERFORMANCEACCOUNT",
    "REPRESENTATIVEACCOUNT", "ISMARKETED",
    "PARENTPRODUCTCODE"
]
product_master = pd.DataFrame.from_records(records)[cols]

# 5. Display with bold heading
display(Markdown("**Product Master Table**"))
display(product_master)

import pandas as pd
import yfinance as yf
from IPython.display import display, Markdown

# 1. Vanguard Target Retirement Fund mappings
vanguard_funds = {
    "VG2020": {"ticker": "VTWNX", "name": "Vanguard Target Retirement 2020 Fund"},
    "VG2025": {"ticker": "VTTVX", "name": "Vanguard Target Retirement 2025 Fund"},
    "VG2030": {"ticker": "VTHRX", "name": "Vanguard Target Retirement 2030 Fund"},
    "VG2035": {"ticker": "VTTHX", "name": "Vanguard Target Retirement 2035 Fund"},
    "VG2040": {"ticker": "VFORX", "name": "Vanguard Target Retirement 2040 Fund"},
    "VG2045": {"ticker": "VTIVX", "name": "Vanguard Target Retirement 2045 Fund"},
    "VG2050": {"ticker": "VFIFX", "name": "Vanguard Target Retirement 2050 Fund"},
    "VG2055": {"ticker": "VFFVX", "name": "Vanguard Target Retirement 2055 Fund"},
    "VG2060": {"ticker": "VTTSX", "name": "Vanguard Target Retirement 2060 Fund"},
    "VG2065": {"ticker": "VLXVX", "name": "Vanguard Target Retirement 2065 Fund"},
}

# 2. Inference helpers

def is_marketed(info):
    return bool(info.get("exchange")) and info.get("regularMarketPrice") is not None

def get_vehicle_type(info):
    qt = info.get("quoteType", "").lower()
    if qt in ("mutualfund", "fund"):
        return "Mutual Fund"
    if qt == "etf":
        return "ETF"
    return None

def get_vehicle_category(vt):
    return "Pooled" if vt in {"Mutual Fund", "ETF"} else None

def get_asset_class(info, ticker=None):
    category = (info.get("category") or info.get("fundCategory") or "").lower()

    if "balanced" in category or "target-date" in category or "retirement" in category:
        return "Multi-Asset"
    if "fixed income" in category or "bond" in category:
        return "Fixed Income"
    if "equity" in category or "stock" in category:
        return "Equity"

    # Fallback: check ticker pattern or fund family
    family = (info.get("fundFamily") or "").lower()
    if "retirement" in family or (ticker and ticker.startswith("VT") and ticker.endswith("X")):
        return "Multi-Asset"

    return "Unclassified"

# 3. Build product master records
records = []
for code, meta in vanguard_funds.items():
    sym = meta["ticker"]
    info = yf.Ticker(sym).info or {}
    vt = get_vehicle_type(info)
    records.append({
        "PRODUCTCODE":           code,
        "PRODUCTNAME":           meta["name"],
        "STRATEGY":              info.get("fundFamily", "Vanguard"),
        "VEHICLECATEGORY":       get_vehicle_category(vt),
        "VEHICLETYPE":           vt,
        "ASSETCLASS":            get_asset_class(info, sym),
        "SHARECLASS":            info.get("shareClass", None),
        "PERFORMANCEACCOUNT":    None,
        "REPRESENTATIVEACCOUNT": None,
        "ISMARKETED":            is_marketed(info),
        "PARENTPRODUCTCODE":     None
    })

# 4. Assemble DataFrame in specified order
cols = [
    "PRODUCTCODE", "PRODUCTNAME", "STRATEGY",
    "VEHICLECATEGORY", "VEHICLETYPE", "ASSETCLASS",
    "SHARECLASS", "PERFORMANCEACCOUNT",
    "REPRESENTATIVEACCOUNT", "ISMARKETED",
    "PARENTPRODUCTCODE"
]
product_master = pd.DataFrame.from_records(records)[cols]

# 5. Display result
display(Markdown("**Product Master Table: Vanguard Retirement Funds**"))
display(product_master)